{
  "version": 3,
  "sources": ["src/lib/transport-http-client.ts"],
  "sourcesContent": ["import { ITransport, Obj } from './types';\n\ntype Cb = (packet: Obj) => Promise<void>;\ntype Thunk = () => void;\nclass TransportHTTPClientSide implements ITransport {\n    cbs: Set<Cb> = new Set();\n    constructor(public url: string, public port: number) {\n        // set up listening for SSE\n        let evtSource = new EventSource('/sync:' + this.port);\n        evtSource.onmessage = async (event) => {\n            for (let cb of this.cbs) {\n                if (event.data.length > 0) {\n                    await cb(event.data);\n                }\n            }\n        }\n    }\n    async send(packet: Obj): Promise<void> {\n        // send events as individual POSTs\n        let response = await fetch(this.url + ':' + this.port, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(packet),\n        });\n        // if the request comes back as anything besides null, call the onReceive callback on it.\n        // so there are two ways we can get messages: as responses here, and via SSE.\n        if (response.text.length > 0) {\n            let packetResponse = JSON.parse(await response.json());\n            for (let cb of this.cbs) {\n                await cb(packetResponse);\n            }\n        }\n    }\n    onReceive(cb: Cb): Thunk {\n        this.cbs.add(cb);\n        return () => this.cbs.delete(cb);\n    }\n}\n\n//================================================================================\nlet main = async () => {\n    let PORT = 8123\n\n    let transport = new TransportHTTPClientSide(`https://localhost`, PORT);\n    transport.onReceive(async (packet: Obj) => {\n        console.log(`got ${JSON.stringify(packet)}`)\n    });\n\n    await transport.send({hello: 'world', from: 'client'})\n}\nmain();"],
  "mappings": ";;AAIA,sCAAoD;AAAA,IAEhD,YAAmB,KAAoB,MAAc;AAAlC;AAAoB;AADvC,iBAAe,IAAI;AAGf,UAAI,YAAY,IAAI,YAAY,WAAW,KAAK;AAChD,gBAAU,YAAY,OAAO,UAAU;AACnC,iBAAS,MAAM,KAAK,KAAK;AACrB,cAAI,MAAM,KAAK,SAAS,GAAG;AACvB,kBAAM,GAAG,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,UAKzB,KAAK,QAA4B;AAEnC,UAAI,WAAW,MAAM,MAAM,KAAK,MAAM,MAAM,KAAK,MAAM;AAAA,QACnD,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,UAAU;AAAA,UACV,gBAAgB;AAAA;AAAA,QAEpB,MAAM,KAAK,UAAU;AAAA;AAIzB,UAAI,SAAS,KAAK,SAAS,GAAG;AAC1B,YAAI,iBAAiB,KAAK,MAAM,MAAM,SAAS;AAC/C,iBAAS,MAAM,KAAK,KAAK;AACrB,gBAAM,GAAG;AAAA;AAAA;AAAA;AAAA,IAIrB,UAAU,IAAe;AACrB,WAAK,IAAI,IAAI;AACb,aAAO,MAAM,KAAK,IAAI,OAAO;AAAA;AAAA;AAKrC,MAAI,OAAO,YAAY;AACnB,QAAI,OAAO;AAEX,QAAI,YAAY,IAAI,wBAAwB,qBAAqB;AACjE,cAAU,UAAU,OAAO,WAAgB;AACvC,cAAQ,IAAI,OAAO,KAAK,UAAU;AAAA;AAGtC,UAAM,UAAU,KAAK,EAAC,OAAO,SAAS,MAAM;AAAA;AAEhD;",
  "names": []
}
